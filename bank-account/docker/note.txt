docker -version


docker network create --attachable -d bridge microservices
docker network ls
docker-compose --version

docker-compose up -d
d means detache

run mongoDB docker
docker run -it -d --name mongo-container -p 27017:27017 --network microservice --restart always -v mongodb_data_container:/data/db mongo:latest

run mysql in docker
docker run -it -d --name mysql-container -p 3306:3306 --network microservice -e MYSQL_ROOT_PASSWORD=abc123 --restart always -v mysql_data_container:/var/lib/mysql mysql:latest

mysql client tool docker (Adminer)
docker run -it -d --name adminer -p 8080:8080 --network microservice -e ADMINER_DEFAULT_SERVER = mysql-container --restart always adminer:latest


api package : contains commands rest controllers and dtos
domain package : contains accounts aggregates event store repos
infrastructure package : command dispatcher, event producer , event sourcing handler and event store implementation

why we need to specify persistent volumes for our kafka,mongoDB and mysql containers?
    we configure docker volumes to ensure that the data of our containers are persisted to the host filesystem
and outlives the lifetime of our containers. else we will lose the data every time that containers are recreated.

there are 3 message types in cqrs
    commands
    events
    queries

what is command?
    A command is a combination of expressed intent.
    In other words it describes something that you want to be done.
    It also contains the information required to undertake action based on that intent

commands and events objects are known as message objects
both require unique identifier



Why do we have to enforce optimistic concurrency control?

    Event sourcing is based on building the state of the aggregate
based on the order of the sequence of events. For the state to be correct,
it is important that the ordering of events is enforced by implementing event
versioning. Optimistic concurrency control is then used to ensure that only
the expected event versions can alter the state of the aggregate at any given
point in time. This is in especially important when two or more clients
requests are made at the same time to alter the state of the aggregate.













